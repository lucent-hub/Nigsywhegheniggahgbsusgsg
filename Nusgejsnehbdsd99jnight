repeat task.wait(0.25) until game:IsLoaded();
getgenv().Image = "rbxassetid://7229442422";
getgenv().ToggleUI = "E"

task.spawn(function()
    if not getgenv().LoadedMobileUI == true then getgenv().LoadedMobileUI = true
        local OpenUI = Instance.new("ScreenGui");
        local ImageButton = Instance.new("ImageButton");
        local UICorner = Instance.new("UICorner");
        OpenUI.Name = "OpenUI";
        OpenUI.Parent = game:GetService("CoreGui");
        OpenUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
        ImageButton.Parent = OpenUI;
        ImageButton.BackgroundColor3 = Color3.fromRGB(105,105,105);
        ImageButton.BackgroundTransparency = 0.8
        ImageButton.Position = UDim2.new(0.9,0,0.1,0);
        ImageButton.Size = UDim2.new(0,50,0,50);
        ImageButton.Image = getgenv().Image;
        ImageButton.Draggable = true;
        ImageButton.Transparency = 1;
        UICorner.CornerRadius = UDim.new(0,200);
        UICorner.Parent = ImageButton;
        ImageButton.MouseButton1Click:Connect(function()
            game:GetService("VirtualInputManager"):SendKeyEvent(true,getgenv().ToggleUI,false,game);
        end)
    end
end)

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Lead Hub - 99 Nights",
    SubTitle = "by Lead",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.E
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")

local Tabs = {
    Main = Window:AddTab({Title = "Main", Icon = "home"}),
    Auto = Window:AddTab({Title = "Auto", Icon = "settings"}),
    ItemTP = Window:AddTab({Title = "Item TP/ESP", Icon = "package"}),
    GameTP = Window:AddTab({Title = "Game TP", Icon = "map"}),
    MobTP = Window:AddTab({Title = "Mob TP", Icon = "users"}),
    Player = Window:AddTab({Title = "Player", Icon = "user"}),
    Visuals = Window:AddTab({Title = "Visuals", Icon = "eye"}),
    Misc = Window:AddTab({Title = "Misc", Icon = "circle-help"})
}

local safezoneBaseplates = {}
local baseplateSize = Vector3.new(2048, 1, 2048)
local baseY = 100
local centerPos = Vector3.new(0, baseY, 0)

for dx = -1, 1 do
    for dz = -1, 1 do
        local pos = centerPos + Vector3.new(dx * baseplateSize.X, 0, dz * baseplateSize.Z)
        local baseplate = Instance.new("Part")
        baseplate.Name = "SafeZoneBaseplate"
        baseplate.Size = baseplateSize
        baseplate.Position = pos
        baseplate.Anchored = true
        baseplate.CanCollide = true
        baseplate.Transparency = 1
        baseplate.Color = Color3.fromRGB(255, 255, 255)
        baseplate.Parent = workspace
        table.insert(safezoneBaseplates, baseplate)
    end
end

Tabs.Main:AddToggle("ShowSafeZone", {
    Title = "Show Safe Zone",
    Default = false,
    Callback = function(enabled)
        for _, baseplate in ipairs(safezoneBaseplates) do
            baseplate.Transparency = enabled and 0.8 or 1
            baseplate.CanCollide = enabled
        end
    end
})

local function stringToCFrame(str)
    local x, y, z = str:match("([^,]+),%s*([^,]+),%s*([^,]+)")
    return CFrame.new(tonumber(x), tonumber(y), tonumber(z))
end

local function teleportToTarget(cf, duration)
    local char = game.Players.LocalPlayer.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    if duration and duration > 0 then
        local ts = game:GetService("TweenService")
        local info = TweenInfo.new(duration, Enum.EasingStyle.Linear)
        local goal = { CFrame = cf }
        local tween = ts:Create(hrp, info, goal)
        tween:Play()
    else
        hrp.CFrame = cf
    end
end

local storyCoords = {
    { "[campsite] camp site", "0, 8, -0"},
    { "[safezone] safe zone", "0, 110, -0" }
}

local storyDropdown = Tabs.GameTP:AddDropdown("Teleports", {
    Title = "Teleports",
    Values = {"[campsite] camp site", "[safezone] safe zone"},
    Multi = false,
    Default = 1,
})

storyDropdown:OnChanged(function(value)
    for _, entry in ipairs(storyCoords) do
        if entry[1] == value then
            teleportToTarget(stringToCFrame(entry[2]), 0.1)
            break
        end
    end
end)

Tabs.ItemTP:AddToggle("ItemESP", {
    Title = "Item ESP",
    Default = false,
    Callback = function(state)
        local itemFolder = workspace:FindFirstChild("Items")
        if not itemFolder then
            warn("workspace.Items folder not found")
            return
        end

        local itemNames = {
            ["Revolver"] = true, ["Oil Barrel"] = true, ["Chainsaw"] = true, ["Giant Sack"] = true, ["Bunny Foot"] = true,["MedKit"] = true, ["Alien Chest"] = true, ["Berry"] = true,
            ["Bolt"] = true, ["Broken Fan"] = true, ["Carrot"] = true, ["Coal"] = true,
            ["Coin Stack"] = true, ["Hologram Emitter"] = true, ["Item Chest"] = true,
            ["Laser Fence Blueprint"] = true, ["Log"] = true, ["Old Flashlight"] = true,
            ["Old Radio"] = true, ["Sheet Metal"] = true, ["Bandage"] = true, ["Rifle"] = true
        }

        local connections = {}

        local function createESP(model)
            if not model:IsA("Model") or not itemNames[model.Name] then return end
            if not model.PrimaryPart or model:FindFirstChild("ESP") then return end

            local billboard = Instance.new("BillboardGui")
            billboard.Name = "ESP"
            billboard.Size = UDim2.new(0, 100, 0, 30)
            billboard.Adornee = model.PrimaryPart
            billboard.AlwaysOnTop = true
            billboard.StudsOffset = Vector3.new(0, 3, 0)
        
            local customFont = Font.new("rbxassetid://16658246179", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            local label = Instance.new("TextLabel")
            
            label.Size = UDim2.new(1, 0, 1, 0)
            label.TextSize = 17
            label.BackgroundTransparency = 1
            label.TextColor3 = Color3.new(1, 1, 1)
            label.TextStrokeTransparency = 0.5
            label.TextScaled = false
            label.FontFace = customFont
            label.Text = model.Name
            
            label.Parent = billboard
            billboard.Parent = model
        end

        local function removeAllESP()
            for _, model in itemFolder:GetChildren() do
                local esp = model:FindFirstChild("ESP")
                if esp then esp:Destroy() end
            end
        end

        if state then
            for _, model in itemFolder:GetChildren() do
                createESP(model)
            end

            local connection = itemFolder.ChildAdded:Connect(function(model)
                if model:IsA("Model") and itemNames[model.Name] then
                    model:GetPropertyChangedSignal("PrimaryPart"):Wait()
                    createESP(model)
                end
            end)

            table.insert(connections, connection)
        else
            removeAllESP()
            for _, conn in connections do
                if conn.Disconnect then conn:Disconnect() end
            end
            table.clear(connections)
        end
    end
})

local localPlayer = Players.LocalPlayer
local itemFolder = workspace:WaitForChild("Items")

local itemNames = {
    "Revolver", "Medkit", "Alien Chest", "Berry", "Bolt", "Broken Fan",
    "Carrot", "Coal", "Coin Stack", "Hologram Emitter", "Item Chest",
    "Laser Fence Blueprint", "Log", "Old Flashlight", "Old Radio",
    "Sheet Metal", "Bandage", "Rifle"
}

local function getModelPart(model)
    if model.PrimaryPart then
        return model.PrimaryPart
    end
    for _, part in pairs(model:GetChildren()) do
        if part:IsA("BasePart") then
            return part
        end
    end
    return nil
end

local itemTPDropdown = Tabs.ItemTP:AddDropdown("TeleportToItem", {
    Title = "Teleport to Item",
    Values = itemNames,
    Multi = false,
    Default = 1,
})

itemTPDropdown:OnChanged(function(value)
    local candidates = {}
    for _, model in pairs(itemFolder:GetChildren()) do
        if model:IsA("Model") and model.Name == value then
            local part = getModelPart(model)
            if part then
                table.insert(candidates, part)
            end
        end
    end

    if #candidates == 0 then
        warn("No '" .. value .. "' found to teleport to.")
        return
    end

    local targetPart = candidates[math.random(1, #candidates)]
    local character = localPlayer.Character
    if character then
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if hrp then
            hrp.CFrame = targetPart.CFrame + Vector3.new(0, 5, 0)
        end
    end
end)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")
local itemsFolder = workspace:WaitForChild("Items")
local remoteEvents = ReplicatedStorage:WaitForChild("RemoteEvents")

local possibleItems = {
    "Alien Chest",
    "Alpha Wolf Pelt",
    "Anvil Front",
    "Anvil Back",
    "Apple",
    "Bandage",
    "Bear Corpse",
    "Bear Pelt",
    "Berry",
    "Biofuel",
    "Bolt",
    "Broken Fan",
    "Bunny Foot",
    "Carrot",
    "Coal",
    "Coin Stack",
    "Cooked Morsel",
    "Cooked Steak",
    "Chainsaw",
    "Cultist",
    "Cultist Gem",
    "Flower",
    "Fuel Canister",
    "Hologram Emitter",
    "Item Chest",
    "Laser Fence Blueprint",
    "Leather Body",
    "Iron Body",
    "Thorn Body",
    "Log",
    "MedKit",
    "Morsel",
    "Old Flashlight",
    "Old Radio",
    "Good Sack",
    "Good Axe",
    "Raygun",
    "Giant Sack",
    "Strong Axe",
    "Oil Barrel",
    "Old Car Engine",
    "Rifle",
    "Rifle Ammo",
    "Revolver",
    "Revolver Ammo",
    "Sapling",
    "Sheet Metal",
    "Steak",
    "Wolf Pelt",
    "Gem of the Forest Fragment",
    "Tyre",
    "Washing Machine",
    "Broken Microwave"
}

local bringItemDropdown = Tabs.ItemTP:AddDropdown("BringItemToYou", {
    Title = "Teleport Item (Bulk):",
    Values = possibleItems,
    Multi = false,
    Default = 1,
})

local function teleportItem(itemName)
    local stackOffsetY = 2
    local count = 0
    local sources = {itemsFolder, ReplicatedStorage:WaitForChild("TempStorage")}

    for _, source in ipairs(sources) do
        for _, item in ipairs(source:GetChildren()) do
            if item.Name == itemName then
                local targetPart = nil

                if itemName == "Berry" then
                    targetPart = item:FindFirstChild("Handle")
                    if not targetPart then
                        for _, child in ipairs(item:GetDescendants()) do
                            if child:IsA("MeshPart") or child:IsA("Part") or child:IsA("UnionOperation") then
                                targetPart = child
                                break
                            end
                        end
                    end
                else
                    for _, child in ipairs(item:GetDescendants()) do
                        if child:IsA("MeshPart") or child:IsA("Part") then
                            targetPart = child
                            break
                        end
                    end
                end

                if targetPart then
                    remoteEvents.RequestStartDraggingItem:FireServer(item)
                    local offset = Vector3.new(0, count * stackOffsetY, 0)
                    targetPart.CFrame = rootPart.CFrame + offset
                    remoteEvents.StopDraggingItem:FireServer(item)
                    count = count + 1
                else
                    warn(itemName .. " found, but no MeshPart or Part inside:", item:GetFullName())
                end
            end
        end
    end
end

bringItemDropdown:OnChanged(function(value)
    teleportItem(value)
end)

local characterFolder = workspace:WaitForChild("Characters")
local possibleCharacters = {
    "Alpha Wolf",
    "Bear",
    "Lost Child",
    "Lost Child2",
    "Lost Child3",
    "Lost Child4",
    "Wolf",
    "Bunny",
    "Cultist",
    "Alien"
}

local mobDropdown = Tabs.MobTP:AddDropdown("TeleportMob", {
    Title = "Teleport Mob:",
    Values = possibleCharacters,
    Multi = false,
    Default = 1,
})

local function getMainPart(model)
    if model.PrimaryPart then
        return model.PrimaryPart
    end
    for _, part in ipairs(model:GetDescendants()) do
        if part:IsA("BasePart") then
            return part
        end
    end
    return nil
end

local function teleportCharacter(characterName)
    local stackOffsetY = 3
    local count = 0

    for _, model in ipairs(characterFolder:GetChildren()) do
        if model.Name == characterName then
            local mainPart = getMainPart(model)
            if mainPart and rootPart then
                local targetCFrame = rootPart.CFrame + Vector3.new(0, count * stackOffsetY, 0)
                if model.PrimaryPart then
                    model:SetPrimaryPartCFrame(targetCFrame)
                else
                    mainPart.CFrame = targetCFrame
                end
                count = count + 1
            else
                warn("No main part found for character:", model:GetFullName())
            end
        end
    end
end

mobDropdown:OnChanged(function(value)
    teleportCharacter(value)
end)

Tabs.Player:AddSlider("JumpPower", {
    Title = "Jump Power",
    Description = "Set your jump power",
    Default = 50,
    Min = 50,
    Max = 700,
    Rounding = 0,
    Callback = function(value)
        local char = LocalPlayer.Character
        if char and char:FindFirstChild("Humanoid") then
            char.Humanoid.JumpPower = value
        end
    end
})

Tabs.Player:AddSlider("WalkSpeed", {
    Title = "Walk Speed",
    Description = "Set your walk speed",
    Default = 16,
    Min = 16,
    Max = 700,
    Rounding = 0,
    Callback = function(value)
        _G.HackedWalkSpeed = value

        local function applyWalkSpeed(humanoid)
            if humanoid then
                humanoid.WalkSpeed = _G.HackedWalkSpeed
                humanoid.Changed:Connect(function(property)
                    if property == "WalkSpeed" and humanoid.WalkSpeed ~= _G.HackedWalkSpeed then
                        humanoid.WalkSpeed = _G.HackedWalkSpeed
                    end
                end)
            end
        end

        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            applyWalkSpeed(LocalPlayer.Character.Humanoid)
        end

        LocalPlayer.CharacterAdded:Connect(function(char)
            char:WaitForChild("Humanoid")
            applyWalkSpeed(char:FindFirstChild("Humanoid"))
        end)
    end
})

Tabs.Player:AddToggle("WalkSpeedToggle", {
    Title = "Walk Speed Toggle (50)",
    Default = false,
    Callback = function(toggle)
        if toggle == true then 
            _G.HackedWalkSpeed = 50
        else
            _G.HackedWalkSpeed = 16
        end

        local function applyWalkSpeed(humanoid)
            if humanoid then
                humanoid.WalkSpeed = _G.HackedWalkSpeed
                humanoid.Changed:Connect(function(property)
                    if property == "WalkSpeed" and humanoid.WalkSpeed ~= _G.HackedWalkSpeed then
                        humanoid.WalkSpeed = _G.HackedWalkSpeed
                    end
                end)
            end
        end

        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            applyWalkSpeed(LocalPlayer.Character.Humanoid)
        end

        LocalPlayer.CharacterAdded:Connect(function(char)
            char:WaitForChild("Humanoid")
            applyWalkSpeed(char:FindFirstChild("Humanoid"))
        end)
    end
})

local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")

local espTransparency = 0.4
local teamCheck = true
local customFont = Font.new("rbxassetid://16658246179", Enum.FontWeight.Regular, Enum.FontStyle.Normal)

local BillboardESPs = {}
local ChamsESPs = {}
local ESPConnections = {}

local ESPEnabled = false
local ChamsEnabled = false

local function round(num, decimals)
    return tonumber(string.format("%." .. (decimals or 0) .. "f", num))
end

local function getRoot(char)
    return char and char:FindFirstChild("HumanoidRootPart")
end

local function createBillboardESP(plr)
    if BillboardESPs[plr] or plr == LocalPlayer then return end
    if not plr.Character or not plr.Character:FindFirstChild("Head") then return end

    local gui = Instance.new("BillboardGui")
    gui.Name = "Billboard_ESP"
    gui.Adornee = plr.Character.Head
    gui.Parent = plr.Character.Head
    gui.Size = UDim2.new(0, 100, 0, 40)
    gui.AlwaysOnTop = true
    gui.StudsOffset = Vector3.new(0, 2, 0)

    local label = Instance.new("TextLabel", gui)
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeTransparency = 0.5
    label.TextScaled = true
    label.FontFace = customFont

    local conn
    conn = RunService.RenderStepped:Connect(function()
        if not plr.Character or not plr.Character:FindFirstChild("Humanoid") then
            gui:Destroy()
            if conn then conn:Disconnect() end
            BillboardESPs[plr] = nil
            ESPConnections[plr] = nil
            return
        end

        local hp = math.floor(plr.Character.Humanoid.Health / plr.Character.Humanoid.MaxHealth * 100)
        label.Text = plr.Name .. " | " .. hp .. "%"
    end)

    BillboardESPs[plr] = gui
    ESPConnections[plr] = conn
end

local function createChamsESP(plr)
    if ChamsESPs[plr] or plr == LocalPlayer then return end
    if not plr.Character or not getRoot(plr.Character) then return end

    local folder = Instance.new("Folder")
    folder.Name = "Chams_ESP"
    folder.Parent = CoreGui
    ChamsESPs[plr] = folder

    for _, part in pairs(plr.Character:GetChildren()) do
        if part:IsA("BasePart") then
            local box = Instance.new("BoxHandleAdornment")
            box.Name = "Cham_" .. plr.Name
            box.Adornee = part
            box.AlwaysOnTop = true
            box.ZIndex = 10
            box.Size = part.Size
            box.Transparency = espTransparency
            box.Color = BrickColor.new(
                teamCheck and (plr.TeamColor == LocalPlayer.TeamColor and "Bright green" or "Bright red") or tostring(plr.TeamColor)
            )
            box.Parent = folder
        end
    end
end

local function cleanupBillboardESP()
    for _, gui in pairs(BillboardESPs) do
        if gui then gui:Destroy() end
    end
    for _, conn in pairs(ESPConnections) do
        if conn then conn:Disconnect() end
    end
    BillboardESPs = {}
    ESPConnections = {}
end

local function cleanupChamsESP()
    for _, folder in pairs(ChamsESPs) do
        if folder then folder:Destroy() end
    end
    ChamsESPs = {}
end

local function handlePlayerESP(plr)
    if ESPEnabled then createBillboardESP(plr) end
    if ChamsEnabled then createChamsESP(plr) end

    plr.CharacterAdded:Connect(function()
        task.wait(1)
        if ESPEnabled then createBillboardESP(plr) end
        if ChamsEnabled then createChamsESP(plr) end
    end)
end

Tabs.Visuals:AddToggle("ESP", {
    Title = "ESP",
    Default = false,
    Callback = function(state)
        ESPEnabled = state
        if not state then
            cleanupBillboardESP()
        else
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer then
                    createBillboardESP(plr)
                end
            end
        end
    end
})

Tabs.Visuals:AddToggle("Chams", {
    Title = "Chams",
    Default = false,
    Callback = function(state)
        ChamsEnabled = state
        if not state then
            cleanupChamsESP()
        else
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer then
                    createChamsESP(plr)
                end
            end
        end
    end
})

for _, plr in pairs(Players:GetPlayers()) do
    if plr ~= LocalPlayer then
        handlePlayerESP(plr)
    end
end

Players.PlayerAdded:Connect(function(plr)
    handlePlayerESP(plr)
end)

local FOVCircle = Drawing.new("Circle")
FOVCircle.Visible = false
FOVCircle.Color = Color3.fromRGB(255, 255, 255)
FOVCircle.Transparency = 1
FOVCircle.Thickness = 1
FOVCircle.Filled = false
FOVCircle.ZIndex = 2

local FOVRadius = 100

RunService.RenderStepped:Connect(function()
    if FOVCircle.Visible then
        FOVCircle.Radius = FOVRadius
        FOVCircle.Position = UserInputService:GetMouseLocation()
    end
end)

Tabs.Visuals:AddToggle("FOVCircle", {
    Title = "FOV Circle",
    Default = false,
    Callback = function(state)
        FOVCircle.Visible = state
    end
})

local extraScriptsDropdown = Tabs.Misc:AddDropdown("ExtraScripts", {
    Title = "Extra Scripts",
    Values = {"Infinite Yield", "Emote GUI", "Anti AFK", "Turtle Spy"},
    Multi = false,
    Default = 1,
})

extraScriptsDropdown:OnChanged(function(value)
    if value == "Infinite Yield" then
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    elseif value == "Emote GUI" then
        loadstring(game:HttpGet("https://raw.githubusercontent.com/dimension-sources/random-scripts-i-found/refs/heads/main/r6%20animations"))()
    elseif value == "Anti AFK" then
        wait(0.5)
        local ba=Instance.new("ScreenGui")
        local ca=Instance.new("TextLabel")
        local da=Instance.new("Frame")
        local _b=Instance.new("TextLabel")
        local ab=Instance.new("TextLabel")
        ba.Parent=game.CoreGui
        ba.ZIndexBehavior=Enum.ZIndexBehavior.Sibling
        ca.Parent=ba
        ca.Active=true
        ca.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)
        ca.Draggable=true
        ca.Position=UDim2.new(0.698610067,0,0.098096624,0)
        ca.Size=UDim2.new(0,370,0,52)
        ca.Font=Enum.Font.SourceSansSemibold
        ca.Text="anti afk"
        ca.TextColor3=Color3.new(0,1,1)
        ca.TextSize=22
        da.Parent=ca
        da.BackgroundColor3=Color3.new(0.196078,0.196078,0.196078)
        da.Position=UDim2.new(0,0,1.0192306,0)
        da.Size=UDim2.new(0,370,0,107)
        _b.Parent=da
        _b.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)
        _b.Position=UDim2.new(0,0,0.800455689,0)
        _b.Size=UDim2.new(0,370,0,21)
        _b.Font=Enum.Font.Arial
        _b.Text="anti afk"
        _b.TextColor3=Color3.new(0,1,1)
        _b.TextSize=20
        ab.Parent=da
        ab.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)
        ab.Position=UDim2.new(0,0,0.158377,0)
        ab.Size=UDim2.new(0,370,0,44)
        ab.Font=Enum.Font.ArialBold
        ab.Text="status: active"
        ab.TextColor3=Color3.new(0,1,1)
        ab.TextSize=20
        local bb=game:service'VirtualUser'
        game:service'Players'.LocalPlayer.Idled:connect(function()
            bb:CaptureController()
            bb:ClickButton2(Vector2.new())
            ab.Text="roblox tried to kick you but failed to do so!"
            wait(2)
            ab.Text="status : active"
        end)
    elseif value == "Turtle Spy" then
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Turtle-Brand/Turtle-Spy/main/source.lua", true))()
    end
end)

local Workspace = game:GetService("Workspace")
local toolsDamageIDs = {
    ["Old Axe"] = "1_8982038982",
    ["Good Axe"] = "112_8982038982",
    ["Strong Axe"] = "116_8982038982",
    ["Chainsaw"] = "647_8992824875",
    ["Spear"] = "196_8999010016"
}

local function getAnyToolWithDamageID()
    for toolName, damageID in pairs(toolsDamageIDs) do
        local tool = player.Inventory:FindFirstChild(toolName)
        if tool then
            return tool, damageID
        end
    end
    return nil, nil
end

local function equipTool(tool)
    if tool then
        remoteEvents.EquipItemHandle:FireServer("FireAllClients", tool)
    end
end

local function unequipTool(tool)
    if tool then
        remoteEvents.UnequipItemHandle:FireServer("FireAllClients", tool)
    end
end

local killAuraToggle = false
local radius = 200

local function killAuraLoop()
    while killAuraToggle do
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local tool, damageID = getAnyToolWithDamageID()
            if tool and damageID then
                equipTool(tool)

                for _, mob in ipairs(Workspace.Characters:GetChildren()) do
                    if mob:IsA("Model") then
                        local part = mob:FindFirstChildWhichIsA("BasePart")
                        if part and (part.Position - hrp.Position).Magnitude <= radius then
                            pcall(function()
                                remoteEvents.ToolDamageObject:InvokeServer(
                                    mob,
                                    tool,
                                    damageID,
                                    CFrame.new(part.Position)
                                )
                            end)
                        end
                    end
                end

                task.wait(0.1)
            else
                warn("No supported tool found in inventory")
                task.wait(1)
            end
        else
            task.wait(0.5)
        end
    end
end

Tabs.Main:AddToggle("KillAura", {
    Title = "Kill Aura",
    Default = false,
    Callback = function(state)
        killAuraToggle = state
        if state then
            task.spawn(killAuraLoop)
        else
            local tool, _ = getAnyToolWithDamageID()
            unequipTool(tool)
        end
    end
})

Tabs.Main:AddSlider("KillAuraRadius", {
    Title = "Kill Aura Radius",
    Description = "Set kill aura radius",
    Default = 200,
    Min = 20,
    Max = 500,
    Rounding = 0,
    Callback = function(value)
        radius = math.clamp(value, 20, 500)
    end
})

local bracket = {
    weapons = {"Laser Sword", "Raygun", "Kunai", "Katana", "Spear"},
    minifoods = {"Apple", "Berry", "Carrot"},
    meat = {"Steak", "Cooked Steak", "Cooked Morsel" , "Morsel"},
    armor = {"Leather Body", "Iron Body", "Thorn Body"},
    guns_ammo = {"Rifle", "Revolver", "Raygun", "Tactical Shotgun", "Revolver Ammo", "Rifle Ammo"},
    materials = {"Log", "Coal", "Fuel Canister", "UFO Junk", "UFO Component", "Bandage", "MedKit", "Old Car Engine", "Broken Fan", "Old Microwave", "Old Radio", "Sheet Metal"},
    pelts = {"Alpha Wolf Pelt", "Bear Pelt", "Wolf Pelt", "Bunny Foot"},
    misc_tools = {"Good Sack", "Old Flashlight", "Old Radio", "Giant Sack", "Strong Flashlight", "Chainsaw"}
}

local function findTeleportablePart(item)
    for _, descendant in ipairs(item:GetDescendants()) do
        if descendant:IsA("BasePart") then
            return descendant
        end
        if descendant:IsA("Model") then
            for _, sub in ipairs(descendant:GetDescendants()) do
                if sub:IsA("BasePart") then
                    return sub
                end
            end
        end
    end
    return nil
end

local function teleportItem(itemName)
    local stackOffsetY = 2
    local count = 0

    for _, item in ipairs(itemsFolder:GetChildren()) do
        if item.Name == itemName then
            local targetPart = findTeleportablePart(item)
            if targetPart then
                remoteEvents.RequestStartDraggingItem:FireServer(item)
                local offset = Vector3.new(0, count * stackOffsetY, 0)
                targetPart.CFrame = rootPart.CFrame + offset
                remoteEvents.StopDraggingItem:FireServer(item)
                count = count + 1
            else
                warn("Couldn't find part for:", item:GetFullName())
            end
        end
    end
end

for groupName, itemList in pairs(bracket) do
    local label = groupName:gsub("_", " "):gsub("/", "/")
    label = label:gsub("(%a)([%w_']*)", function(first, rest)
        return first:upper() .. rest:lower()
    end)
    
    local dropdown = Tabs.ItemTP:AddDropdown(groupName, {
        Title = label,
        Values = itemList,
        Multi = false,
        Default = 1,
    })
    
    dropdown:OnChanged(function(value)
        teleportItem(value)
    end)
end

local campfireDropPos = Vector3.new(0, 19, 0)
local machineDropPos = Vector3.new(21, 16, -5)

local campfireFuelItems = {"Log", "Coal", "Fuel Canister", "Oil Barrel", "Biofuel"}
local autocookItems = {"Morsel", "Steak"}
local autoGrindItems = {"UFO Junk", "UFO Component", "Old Car Engine", "Broken Fan", "Old Microwave", "Bolt", "Log", "Cultist Gem", "Sheet Metal", "Old Radio","Tyre","Washing Machine", "Cultist Experiment", "Cultist Component", "Gem of the Forest Fragment", "Broken Microwave"}
local autoEatFoods = {"Cooked Steak", "Cooked Morsel", "Berry", "Carrot", "Apple"}
local biofuelItems = {"Carrot", "Cooked Morsel", "Morsel", "Steak", "Cooked Steak", "Log"}

local autoFuelEnabledItems = {}
local autoCookEnabledItems = {}
local autoGrindEnabledItems = {}
local autoEatEnabled = false
local autoBreakEnabled = false
local autoBiofuelEnabledItems = {}
local alwaysFeedEnabledItems = {}
local autoEatHPEnabled = false

local function moveItemToPos(item, position)
    if not item or not item:IsDescendantOf(workspace) then return end
    local targetPart = findTeleportablePart(item)
    if targetPart then
        remoteEvents.RequestStartDraggingItem:FireServer(item)
        targetPart.CFrame = CFrame.new(position)
        remoteEvents.StopDraggingItem:FireServer(item)
    end
end

local function moveItemToCampfire(item)
    moveItemToPos(item, campfireDropPos)
end

local function moveItemToMachine(item)
    moveItemToPos(item, machineDropPos)
end

local function isItemInInventory(itemName)
    return player.Inventory:FindFirstChild(itemName) ~= nil
end

local function getItemFromInventory(itemName)
    return player.Inventory:FindFirstChild(itemName)
end

local function getItemFromWorkspace(itemName)
    for _, item in ipairs(itemsFolder:GetChildren()) do
        if item.Name == itemName then
            return item
        end
    end
    return nil
end

local function autoFuelLoop()
    while #autoFuelEnabledItems > 0 do
        for _, itemName in ipairs(autoFuelEnabledItems) do
            local item = getItemFromWorkspace(itemName)
            if item then
                moveItemToCampfire(item)
            end
        end
        task.wait(0.5)
    end
end

local function autoCookLoop()
    while #autoCookEnabledItems > 0 do
        for _, itemName in ipairs(autoCookEnabledItems) do
            local item = getItemFromWorkspace(itemName)
            if item then
                moveItemToCampfire(item)
            end
        end
        task.wait(0.5)
    end
end

local function autoGrindLoop()
    while #autoGrindEnabledItems > 0 do
        for _, itemName in ipairs(autoGrindEnabledItems) do
            local item = getItemFromWorkspace(itemName)
            if item then
                moveItemToMachine(item)
            end
        end
        task.wait(0.5)
    end
end

local function autoEatLoop()
    while autoEatEnabled do
        for _, foodName in ipairs(autoEatFoods) do
            if isItemInInventory(foodName) then
                local food = getItemFromInventory(foodName)
                if food then
                    remoteEvents.EatFood:FireServer(food)
                    task.wait(0.5)
                end
            end
        end
        task.wait(1)
    end
end

local function autoBreakLoop()
    while autoBreakEnabled do
        for _, itemName in ipairs(autoGrindItems) do
            if isItemInInventory(itemName) then
                local item = getItemFromInventory(itemName)
                if item then
                    moveItemToMachine(item)
                end
            end
        end
        task.wait(1)
    end
end

local function autoBiofuelLoop()
    while #autoBiofuelEnabledItems > 0 do
        for _, itemName in ipairs(autoBiofuelEnabledItems) do
            local item = getItemFromWorkspace(itemName)
            if item then
                moveItemToMachine(item)
            end
        end
        task.wait(0.5)
    end
end

local function alwaysFeedLoop()
    while #alwaysFeedEnabledItems > 0 do
        for _, itemName in ipairs(alwaysFeedEnabledItems) do
            local item = getItemFromWorkspace(itemName)
            if item then
                moveItemToCampfire(item)
            end
        end
        task.wait(0.5)
    end
end

local function autoEatHPLoop()
    while autoEatHPEnabled do
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health < humanoid.MaxHealth * 0.5 then
                for _, foodName in ipairs(autoEatFoods) do
                    if isItemInInventory(foodName) then
                        local food = getItemFromInventory(foodName)
                        if food then
                            remoteEvents.EatFood:FireServer(food)
                            task.wait(0.5)
                        end
                    end
                end
            end
        end
        task.wait(1)
    end
end

local autoFuelToggle = Tabs.Auto:AddToggle("AutoFuel", {
    Title = "Auto Fuel (Campfire)",
    Default = false,
    Callback = function(state)
        if state then
            autoFuelEnabledItems = campfireFuelItems
            task.spawn(autoFuelLoop)
        else
            autoFuelEnabledItems = {}
        end
    end
})

local autoCookToggle = Tabs.Auto:AddToggle("AutoCook", {
    Title = "Auto Cook (Campfire)",
    Default = false,
    Callback = function(state)
        if state then
            autoCookEnabledItems = autocookItems
            task.spawn(autoCookLoop)
        else
            autoCookEnabledItems = {}
        end
    end
})

local autoGrindToggle = Tabs.Auto:AddToggle("AutoGrind", {
    Title = "Auto Grind (Machine)",
    Default = false,
    Callback = function(state)
        if state then
            autoGrindEnabledItems = autoGrindItems
            task.spawn(autoGrindLoop)
        else
            autoGrindEnabledItems = {}
        end
    end
})

local autoEatToggle = Tabs.Auto:AddToggle("AutoEat", {
    Title = "Auto Eat Food",
    Default = false,
    Callback = function(state)
        autoEatEnabled = state
        if state then
            task.spawn(autoEatLoop)
        end
    end
})

local autoBreakToggle = Tabs.Auto:AddToggle("AutoBreak", {
    Title = "Auto Break (Inventory)",
    Default = false,
    Callback = function(state)
        autoBreakEnabled = state
        if state then
            task.spawn(autoBreakLoop)
        end
    end
})

local autoBiofuelToggle = Tabs.Auto:AddToggle("AutoBiofuel", {
    Title = "Auto Biofuel (Machine)",
    Default = false,
    Callback = function(state)
        if state then
            autoBiofuelEnabledItems = biofuelItems
            task.spawn(autoBiofuelLoop)
        else
            autoBiofuelEnabledItems = {}
        end
    end
})

local alwaysFeedToggle = Tabs.Auto:AddToggle("AlwaysFeed", {
    Title = "Always Feed (Campfire)",
    Default = false,
    Callback = function(state)
        if state then
            alwaysFeedEnabledItems = campfireFuelItems
            task.spawn(alwaysFeedLoop)
        else
            alwaysFeedEnabledItems = {}
        end
    end
})

local autoEatHPToggle = Tabs.Auto:AddToggle("AutoEatHP", {
    Title = "Auto Eat When Low HP",
    Default = false,
    Callback = function(state)
        autoEatHPEnabled = state
        if state then
            task.spawn(autoEatHPLoop)
        end
    end
})

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})

InterfaceManager:SetFolder("LeadHub99Nights")
SaveManager:SetFolder("LeadHub99Nights")

Window:SelectTab(1)

Fluent:Notify({
    Title = "Lead Hub",
    Content = "Loaded successfully!",
    Duration = 8
})

SaveManager:BuildConfigSection(Tabs.Misc)
InterfaceManager:BuildInterfaceSection(Tabs.Misc)

SaveManager:LoadAutoloadConfig()
